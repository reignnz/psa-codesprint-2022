// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  password_hash     String
  firstName         String
  lastName          String
  staff             Staff?
  designatedOfficer DesignatedOfficer?
  aetos             Aetos?
  admin             Admin?
  request           Request[]

  @@map("users")
}

model Staff {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int         @unique
  requestedPons PON[]
  signatures    Signature[]

  @@map("staff")
}

model DesignatedOfficer {
  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int   @unique
  issuedPons PON[]

  @@map("designated_officers")
}

model Aetos {
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int            @unique
  verfications Verification[]

  @@map("aetos")
}

model Admin {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("admins")
}

model Request {
  id           Int      @id @default(autoincrement())
  pon          PON      @relation(fields: [ponId], references: [id], onDelete: Cascade)
  ponId        Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int      @unique
  submitted_at DateTime @default(now())

  @@map("requests")
}

model PON {
  id                 Int               @id @default(autoincrement())
  requestor          Staff             @relation(fields: [requestorId], references: [userId], onDelete: Cascade)
  requestorId        Int               @unique
  issuer             DesignatedOfficer @relation(fields: [issuerId], references: [userId], onDelete: Cascade)
  issuerId           Int               @unique
  company_name       String
  vehicle_number     String
  driver_name        String
  driver_pass_number String
  item_description   String
  isCompleted        Boolean           @default(false)
  isArchived         Boolean           @default(false)
  signature          Signature?
  verifiation        Verification?
  pictures           Picture[]
  request            Request?
  issued_at          DateTime          @default(now())
  last_updated_at    DateTime          @updatedAt

  @@map("pon")
}

model Picture {
  id          String   @id @default(uuid())
  content     Bytes
  pon         PON      @relation(fields: [ponId], references: [id], onDelete: Cascade)
  ponId       Int
  uploaded_at DateTime @default(now())

  @@map("pictures")
}

model Signature {
  pon       PON      @relation(fields: [ponId], references: [id], onDelete: Cascade)
  ponId     Int      @unique
  user      Staff    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    Int      @unique
  signed_at DateTime @default(now())

  @@map("signatures")
}

model Verification {
  pon         PON      @relation(fields: [ponId], references: [id], onDelete: Cascade)
  ponId       Int      @unique
  user        Aetos    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      Int      @unique
  verified_at DateTime @default(now())

  @@map("verifications")
}
